version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.11

  docker-executor:
    docker:
      - image: cimg/base:stable

jobs:
  lint:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt
      - run:
          name: Lint code
          command: |
            . venv/bin/activate
            flake8 . 

  format:
      executor: python-executor
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              python -m venv venv
              . venv/bin/activate
              pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt
        - run:
            name: Check Black formatting
            command: |
              . venv/bin/activate
              black .

        - run:
            name: Check import order with isort
            command: |
              . venv/bin/activate
              isort . 

  test:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            pytest tests/

  coverage:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt
      - run:
          name: Run coverage
          command: |
            . venv/bin/activate
            coverage run -m pytest
            coverage report --fail-under=80

  security:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt
      - run:
          name: Run Bandit security scan
          command: |
            . venv/bin/activate
            bandit -r app.py

  lambdatest-ui:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt
      - run:
          name: Run UI tests on LambdaTest
          command: |
            . venv/bin/activate
            pytest tests/test_lambdatest.py

  # docker-build-and-push:
  #   executor: docker-executor
  #   steps:
  #     - checkout
  #     - setup_remote_docker

  #     - run:
  #         name: Build and Tag Docker images
  #         command: |
  #           IMAGE_TAG=${CIRCLE_SHA1:0:7}
  #           docker build -t $DOCKERHUB_USERNAME/flask-hit-counter:$IMAGE_TAG .
  #           docker tag $DOCKERHUB_USERNAME/flask-hit-counter:$IMAGE_TAG ghcr.io/$GHCR_USERNAME/flask-hit-counter:$IMAGE_TAG

  #     - run:
  #         name: Push to Docker Hub
  #         command: |
  #           echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  #           docker push $DOCKERHUB_USERNAME/flask-hit-counter:${CIRCLE_SHA1:0:7}

  #     - run:
  #         name: Push to GitHub Container Registry (GHCR)
  #         command: |
  #           echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
  #           docker push ghcr.io/$GHCR_USERNAME/flask-hit-counter:${CIRCLE_SHA1:0:7}

  # deploy-to-hf:
  #   executor: python-executor
  #   steps:
  #     - checkout

  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt update && sudo apt install -y git-lfs  # Only needed if using Git LFS

  #     - run:
  #         name: Upload to Hugging Face Space
  #         command: |
  #           pip install --upgrade huggingface-hub
  #           python -c "
  #           from huggingface_hub import HfApi
  #           api = HfApi(token='$HF_TOKEN')
            
  #           # Verify token works first (fixed string formatting)
  #           try:
  #               print('Testing token...')
  #               whoami = api.whoami()
  #               print('‚úÖ Success! Authenticated as: ' + whoami['name'])
  #           except Exception as e:
  #               print('‚ùå Token validation failed!')
  #               raise e
            
  #           # Proceed with upload
  #           api.upload_folder(
  #               folder_path='.',
  #               repo_id='intelliport/flask-hit-counter',
  #               repo_type='space',
  #               allow_patterns=['*'],
  #               ignore_patterns=['.git*', '.circleci*', '__pycache__*'],
  #               commit_message='CI deployment [skip ci]'
  #           )
  #           print('üöÄ Deployment successful!')
  #           "
workflows:
  flask_hit_counter_pipeline:
    jobs:
      - lint
      - format
      - test
      - coverage
      - security
      - lambdatest-ui:
          requires:
            - test
      # - docker-build-and-push:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: main
      # - deploy-to-hf:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: main


